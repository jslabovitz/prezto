#!/usr/bin/env zsh

function prompt_johnl_precmd {
  vcs_info
}

### git: Show marker (T) if there are untracked files in repository
# Make sure you have added staged to your 'formats':  %c
function +vi-git-untracked() {

  if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null) ]] {
  } else {
    hook_com[unstaged]+='%F{red}•%f'
  }
}

### git: Show +N/-N when your local branch is ahead-of or behind remote HEAD.
# Make sure you have added misc to your 'formats':  %m
function +vi-git-aheadbehind() {
    local ahead behind
    local -a gitstatus

    ahead=$(git rev-list ${hook_com[branch]}@{upstream}..HEAD 2>/dev/null | wc -l)
    (( $ahead )) && gitstatus+="+"

    behind=$(git rev-list HEAD..${hook_com[branch]}@{upstream} 2>/dev/null | wc -l)
    (( $behind )) && gitstatus+="-"

    hook_com[misc]+=${(j::)gitstatus}
}

function prompt_johnl_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz vcs_info

  # Add hook for calling vcs_info before each command.
  add-zsh-hook precmd prompt_johnl_precmd

  # Formats:
  #   %b - branchname
  #   %u - unstagedstr (see below)
  #   %c - stagedstr (see below)
  #   %a - action (e.g. rebase-i)
  #   %R - repository path
  #   %S - path in the repository

  # Set vcs_info parameters.
  zstyle ':vcs_info:*' enable git svn
  zstyle ':vcs_info:*' check-for-changes true
  zstyle ':vcs_info:git*+set-message:*' hooks git-untracked git-aheadbehind
  zstyle ':vcs_info:*' formats      '%c%u%F{yellow}%m%f'
  zstyle ':vcs_info:*' stagedstr    ' %F{yellow}•%f'
  zstyle ':vcs_info:*' unstagedstr  ' %F{red}•%f'
  zstyle ':vcs_info:*' nvcsformats  ''

  local user='%F{magenta}%n@%m%f'
  local pwd='%F{blue}%~%f'
  local return_code='%(?..%F{red}%?%f )'
  local mode='%(!.#.%%)'

  #
  # get editor info
  #

  # indicate when the editor is in the primary keymap (emacs or viins)
  zstyle ':prezto:module:editor:info:keymap:primary' format 'V'

  # indicate when the editor is in the primary keymap (emacs or viins) insert mode
  zstyle ':prezto:module:editor:info:keymap:primary:insert' format 'I'

  # indicate when the editor is in the primary keymap (emacs or viins) overwrite mode
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format 'O'

  # indicate when the editor is in the alternate keymap (vicmd)
  zstyle ':prezto:module:editor:info:keymap:alternate' format 'E'

  # indicate when the editor is completing
  zstyle ':prezto:module:editor:info:completing' format '...'

  # Then add `$editor_info[context]`, where context is *keymap*, *insert*, or
  # *overwrite*, to `$PROMPT` or `$RPROMPT`.

  # editor_msg='[${editor_info[keymap]}${editor_info[insert]},${editor_info[overwrite]}]'
  editor_msg=''

  # Define prompts.
  setopt promptsubst
  PROMPT="${editor_msg}${return_code}${user} ${pwd}\${vcs_info_msg_0_} ${mode} "
}

prompt_johnl_setup "$@"